version: "3"

services:  

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks: 
        - observability
   
  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.0
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    networks: 
        - observability

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:7.13.0
    container_name: metricbeat
    user: root
    volumes:      
      - /var/run/docker.sock:/var/run/docker.sock
      - ./beats/metric/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml
    command: ["sh", "-c", "chmod go-w /usr/share/metricbeat/metricbeat.yml && metricbeat -e"]
    restart: on-failure
    environment:
      - setup.kibana.host=kibana:5601
    networks: 
      - observability

  heartbeat:
    image: docker.elastic.co/beats/heartbeat:7.13.0
    container_name: heartbeat
    volumes:      
      - ./beats/heartbeat/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml
    command: ["heartbeat", "-e"]
    environment: 
      - setup.kibana.host=kibana:5601
      - BEAT_STRICT_PERMS=false
    networks: 
      - observability

  apm:
    image: docker.elastic.co/apm/apm-server-oss:7.13.0
    container_name: apm
    volumes:      
      - ./apm/apm-server.yml:/usr/share/apm-server/apm-server.yml
    command: ["apm-server", "-e"]
    ports:
      - "8200:8200"
    restart: on-failure
    environment:
      - BEAT_STRICT_PERMS=false
    networks: 
      - observability

  web:
    build:
      context: .
      dockerfile: src/Dockerfile
    container_name: tasks_propig_web
    ports:
      - "8000:8000"
    depends_on:
      - db
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: tasks
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
    networks:
      - observability

  db:
    image: postgres:16
    container_name: tasks_propig_postgres
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: tasks
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - observability



networks:
  observability:
    external: true

volumes:
  postgres_data: